/*
	Ishaan is trapped in a city full of walls. To escape from there, it needs to climb N walls, one after the other. He can climb a wall if its height is atmost K.
Ishaan also has a superpower. He can reduce the height of a wall H by K by using his superpower. Since he can't use this power many times, calculate the minimum number of times he has to use this power to go over all the walls.

Example 1:

â€‹Input : arr[ ] = {5, 3, 2, 6, 8} and K = 5
Output : 2
Explanation:
Heights : 5 3 2 6 8 Ishaan can climb a 
wall with height atmost 5. So he climbs 
the first 3 walls easily. Now he has to 
use his power to reduce the height of the 
4th wall. After using his power, heights 
: 5 3 2 1 8, Now to climb the last wall, 
he again uses his power. Final heights 
: 5 3 2 1 3

â€‹Example 2:

Input : arr[ ] = {2, 6, 4, 8, 1, 6} and K = 4 
Output :  3 
*/

SOLUTION:

class complete
{
      public static void main(String[] args)
      {
	   int cnt = 0;
	   for(int i=0;i<n;i++) 
           {
		if(arr[i]<k)
		{continue;}
		else if(arr[i]%k==0)
		{
			cnt+=(arr[i]/k)-1;
		}
		else
		{
			cnt+=arr[i]/k;
		}
           }
	return cnt;
      }
}