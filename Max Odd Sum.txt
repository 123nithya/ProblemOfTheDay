/*
	Given an array of integers, check whether there is a subsequence with odd sum and if yes, then finding the maximum odd sum. If no subsequence contains odd sum, print -1.


Example 1:

Input:
N=4
arr[] = {4, -3, 3, -5}
Output: 7
Explanation:
The subsequence with maximum odd
sum is 4 + 3 = 7

Example 2:

Input:
N=5
arr[] = {2, 5, -4, 3, -1}
Output: 9
Explanation:
The subsequence with maximum odd 
sum is 2 + 5 + 3 + -1 = 9
*/

SOLUTION:

class Solution
{
	long findMaxOddSubarraySum(long arr[],int n)
	{
		long sum = 0;
		long min = Long.MAX_VALUE;
		boolean odd = false;
		for(int i=0;i<n;i++)
		{
			if(arr[i]>0)
			{
				sum+=arr[i];
			}
			if(arr[i]%2!=0)
			{
				odd = true;
				if(min>Math.abs(arr[i]))
				{
					min = Math.abs(arr[i]);
				}
			}
		}
		if(odd == false)
		{
			return -1;
		}
		if(sum%2==0)
		{
			sum-=min;
		}
		return sum;
	}
}