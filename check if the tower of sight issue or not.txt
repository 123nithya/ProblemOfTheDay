/*
	Four tower A,B,C,D are to be created.Tower A is to communicate with tower C. Tower B is to communicate with tower D.
Line of sight issue can occur under the following conditions
	when tower B or D is in the straight line connecting A and C
	when tower A or C is in the straight line connecting B and D
The program must accept the co-ordinates of all four towers and print "yes" or "no" depending on whether line of sight issue will occur or not.

INPUT:
0 0
0 -2 
2 0
0 2

OUTPUT:
yes

INPUT:
0 0
0 -2
2 0
0 -5

OUTPUT:
no
*/

SOLUTION:

import java.util.*;
class Main{
    
    static class pair{
        int first,second;
        public pair(int first, int second)
        {
            this.first = first;
            this.second = second;
        }
    }
    
    static void towerOfSight(pair a,pair b,pair c, pair d)
    {
        int flag = 0;
        if(checkIntersection(a,c,b)==1)
        {
            flag = 1;
        }else if(checkIntersection(a,c,d)==1)
        {
            flag = 1;
        }else if(checkIntersection(b,d,a)==1)
        {
            flag = 1;
        }
        else if(checkIntersection(b,d,c)==1)
        {
            flag = 1;
        }
        System.out.print(flag==1?"yes":"no");
    }
    
    static int checkIntersection(pair p1,pair p2,pair p)
    {
        int val = 0;
        if(p1.second == p2.second && p1.second == p.second)
        {
            if((p.first<=Math.max(p1.first,p2.first))&&(p.first>=Math.min(p1.first,p2.first)))
            {
                return 1;
            }
        }
        
        if(p1.first == p2.first && p1.second == p.second)
        {
            if((p.second<=Math.max(p1.second,p2.second))&&(p.second>=Math.min(p1.second,p2.second)))
            {
                return 1;
            }
        }
        else{
            val = (p.second-p1.second)*(p2.first-p1.first)-(p.first-p1.first)*(p2.second-p1.second);
            if(val==0)
            {
                if((p.first<=Math.max(p1.first,p2.first))&&(p.first>=Math.min(p1.first,p2.first))&&(p.second<=Math.max(p1.second,p2.second))&&(p.second>=Math.min(p1.second,p2.second)))
                {
                    return 1;
                }
            }
        }
        return 0;
    }
    
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        int e = sc.nextInt();
        int f = sc.nextInt();
        int g = sc.nextInt();
        int h = sc.nextInt();
        
        pair w = new pair(a,b);
        pair x = new pair(c,d);
        pair y = new pair(e,f);
        pair z = new pair(g,h);
        
        towerOfSight(w,x,y,z);
    }
}