/*
	Given an array arr of n integers, sort the first half of the array in ascending order and second half in descending order.

Example 1:

Input:
n = 4
arr[] = {10, 20, 30, 40}
Output: 10 20 40 30
Example 2:

Input:
n = 9
arr[] = {5, 4, 6, 2, 1, 3, 8, 9, 7}
Output: 2 4 5 6 9 8 7 3 1
*/


SOLUTION:

Solution - one:

class Solution {
    void customSort(int[] arr, int n) {
        Arrays.sort(arr,0,n/2);
        Arrays.sort(arr,n/2,n);
        
        //reversing later half
        int i = n/2;
        int j = n-1;
        
        while(i<=j){
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            
            i++;
            j--;
        }
    }
}

Solution - two:

class Solution {
    void customSort(int[] arr, int n) {

        ArrayList<Integer> ar1= new ArrayList<>();
        ArrayList<Integer> ar2= new ArrayList<>();
        
         for(int i=0;i<n/2;i++)
            ar1.add(arr[i]);
        
         for(int i=n/2;i<n;i++)
            ar2.add(arr[i]);
        
         Collections.sort(ar1);
         Collections.sort(ar2, Collections.reverseOrder()); 
        
         ar1.addAll(ar2);
         for(int i=0;i<n;i++)
            arr[i]=ar1.get(i);
    }
}